# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import IntegralApiEnvironment
from .types.application_tier import ApplicationTier


class TiersClient:
    def __init__(self, *, environment: IntegralApiEnvironment, integral_application_id: str, api_key: str):
        self._environment = environment
        self.integral_application_id = integral_application_id
        self.api_key = api_key

    def get_all(self) -> typing.List[ApplicationTier]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", "tiers"),
            headers=remove_none_from_headers(
                {"Integral-Application-Id": self.integral_application_id, "Integral-Application-Id": self.api_key}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ApplicationTier], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

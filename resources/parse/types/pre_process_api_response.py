# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .application_parse_response import ApplicationParseResponse
from .request_pre_process_response import RequestPreProcessResponse
from .return_back_to_user_union_type import ReturnBackToUserUnionType
from .user_parse_response import UserParseResponse


class PreProcessApiResponse(pydantic.BaseModel):
    request: RequestPreProcessResponse
    status_code: int = pydantic.Field(alias="statusCode")
    user: UserParseResponse
    application: ApplicationParseResponse
    return_back_to_user: typing.Optional[ReturnBackToUserUnionType] = pydantic.Field(alias="returnBackToUser")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import IntegralApiEnvironment
from ..application_user.types.api_key import ApiKey
from .types.rotate_timings import RotateTimings


class ApiKeysClient:
    def __init__(self, *, environment: IntegralApiEnvironment, integral_application_id: str, api_key: str):
        self._environment = environment
        self.integral_application_id = integral_application_id
        self.api_key = api_key

    def generate(
        self,
        *,
        user_id: str,
        name: typing.Optional[str] = None,
        description: typing.Optional[str] = None,
        is_sandbox: typing.Optional[bool] = None,
    ) -> ApiKey:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "key/create"),
            json=jsonable_encoder(
                {"userId": user_id, "name": name, "description": description, "isSandbox": is_sandbox}
            ),
            headers=remove_none_from_headers(
                {"Integral-Application-Id": self.integral_application_id, "Integral-Application-Id": self.api_key}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApiKey, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_production(
        self, user_id: str, *, limit: typing.Optional[int] = None, after: typing.Optional[str] = None
    ) -> typing.List[ApiKey]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"key/{user_id}/production"),
            params={"limit": limit, "after": after},
            headers=remove_none_from_headers(
                {"Integral-Application-Id": self.integral_application_id, "Integral-Application-Id": self.api_key}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ApiKey], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def retrieve_sandbox(
        self, user_id: str, *, limit: typing.Optional[int] = None, after: typing.Optional[str] = None
    ) -> typing.List[ApiKey]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"key/{user_id}"),
            params={"limit": limit, "after": after},
            headers=remove_none_from_headers(
                {"Integral-Application-Id": self.integral_application_id, "Integral-Application-Id": self.api_key}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[ApiKey], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def pause(self, *, api_key: str) -> ApiKey:
        _response = httpx.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment}/", "key/pause"),
            json=jsonable_encoder({"apiKey": api_key}),
            headers=remove_none_from_headers(
                {"Integral-Application-Id": self.integral_application_id, "Integral-Application-Id": self.api_key}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApiKey, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def unpause(self, *, api_key: str) -> ApiKey:
        _response = httpx.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment}/", "key/unpause"),
            json=jsonable_encoder({"apiKey": api_key}),
            headers=remove_none_from_headers(
                {"Integral-Application-Id": self.integral_application_id, "Integral-Application-Id": self.api_key}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApiKey, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def revoke(self, *, api_key: str) -> ApiKey:
        _response = httpx.request(
            "DELETE",
            urllib.parse.urljoin(f"{self._environment}/", "key/revoke"),
            json=jsonable_encoder({"apiKey": api_key}),
            headers=remove_none_from_headers(
                {"Integral-Application-Id": self.integral_application_id, "Integral-Application-Id": self.api_key}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApiKey, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def rotate(self, *, api_key: str, expires_in: RotateTimings) -> ApiKey:
        _response = httpx.request(
            "PUT",
            urllib.parse.urljoin(f"{self._environment}/", "key/rotate"),
            json=jsonable_encoder({"apiKey": api_key, "expiresIn": expires_in}),
            headers=remove_none_from_headers(
                {"Integral-Application-Id": self.integral_application_id, "Integral-Application-Id": self.api_key}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApiKey, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime
from .application_base_url import ApplicationBaseUrl
from .organization import Organization


class Application(pydantic.BaseModel):
    id: str
    created_at: str = pydantic.Field(alias="createdAt")
    updated_at: str = pydantic.Field(alias="updatedAt")
    deleted_at: typing.Optional[str] = pydantic.Field(alias="deletedAt")
    name: str
    description: str
    public_id: str = pydantic.Field(alias="publicId")
    organization: Organization
    base_url: ApplicationBaseUrl = pydantic.Field(alias="baseUrl")
    ip_rate_limit: int = pydantic.Field(alias="ipRateLimit")
    amount_per_interval: typing.Optional[str] = pydantic.Field(alias="amountPerInterval")
    time_interval: str = pydantic.Field(alias="timeInterval")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

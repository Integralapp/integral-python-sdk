# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ....core.datetime_utils import serialize_datetime


class ApiKey(pydantic.BaseModel):
    id: str
    created_at: str = pydantic.Field(alias="createdAt")
    updated_at: str = pydantic.Field(alias="updatedAt")
    deleted_at: str = pydantic.Field(alias="deletedAt")
    api_key: str = pydantic.Field(alias="apiKey")
    name: typing.Optional[str]
    expires_at: str = pydantic.Field(alias="expiresAt")
    description: typing.Optional[str]
    is_paused: bool = pydantic.Field(alias="isPaused")
    is_revoked: bool = pydantic.Field(alias="isRevoked")
    last_used: typing.Optional[str] = pydantic.Field(alias="lastUsed")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}

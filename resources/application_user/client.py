# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...environment import IntegralApiEnvironment
from .types.application_user import ApplicationUser
from .types.application_user_create_response import ApplicationUserCreateResponse


class ApplicationUserClient:
    def __init__(self, *, environment: IntegralApiEnvironment, integral_application_id: str, api_key: str):
        self._environment = environment
        self.integral_application_id = integral_application_id
        self.api_key = api_key

    def create(
        self,
        *,
        user_id: str,
        tier_id: str,
        description: typing.Optional[str] = None,
        metadata: typing.Optional[typing.Dict[str, typing.Any]] = None,
    ) -> ApplicationUserCreateResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "user"),
            json=jsonable_encoder(
                {"userId": user_id, "tierId": tier_id, "description": description, "metadata": metadata}
            ),
            headers=remove_none_from_headers(
                {"Integral-Application-Id": self.integral_application_id, "Integral-Application-Id": self.api_key}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApplicationUserCreateResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, user_id: str) -> ApplicationUser:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"user/{user_id}"),
            headers=remove_none_from_headers(
                {"Integral-Application-Id": self.integral_application_id, "Integral-Application-Id": self.api_key}
            ),
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ApplicationUser, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
